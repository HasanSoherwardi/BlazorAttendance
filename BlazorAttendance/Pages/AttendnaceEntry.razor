@page "/NewAttendance_Entry"

@using BlazorAttendance.Models
@using BlazorAttendance.Services
@using Microsoft.Extensions.Logging;
@inject IStudentService StudentService
@inject IAttendanceService AttendanceService
@inject ILogger<AttendnaceEntry> Logger


<h1>Attendance Entry</h1>


@if (students == null)
{
    <p><em>There is no records to show...</em></p>
}
else
{

    <div class="container" style="margin-top:10px">

        @foreach (var student in students)
        {

            <div class="card" style="margin-top: 15px">
                <div class="card-header">
                    Student Photo

                </div>
                <div class="card-body">
                    @if (student.myArray != null)
                    {
                        _fileBytes = GetImage(Convert.ToBase64String(student.myArray));
                        imgSrc = string.Format("data:image/jpg;base64," + Convert.ToBase64String(_fileBytes));
                    }
                    else
                    {
                        LoadLocalImage();
                    }
                    <img src="@imgSrc" width="200" height="200" style="border: 1px solid; border-block-color:black" />
                </div>
                <div class="card-footer">

                    <div class="form-group">
                        <label>Student Name: </label>
                        <input readonly="true" class="form-control" @bind="student.Name">

                    </div>

                    <div class="form-group">
                        <label>Roll No: </label>
                        <input readonly="true" class="form-control" @bind="student.RollNo">
                    </div>

                    <div class="form-group">
                        <label>Parents Mobile: </label>
                        <input readonly="true" class="form-control" @bind="student.Mobile">
                        <button style="margin-top:10px"  type="submit" @onclick="@(()=> Present(student))" class="btn btn-success">Present</button>
                        <button style="margin-top:10px" type="submit" @onclick="@(()=> Absent(student))" class="btn btn-danger">Absent</button>                
                    </div>
                </div>

            </div>
        }

    </div>

}

@code {
    private List<Student> students;
    private string imgSrc = null;
    private byte[] _fileBytes = null;

    protected override async Task OnInitializedAsync()
    {
        students = await StudentService.GetAllStudent();
    }

    private async void Present(Student std)
    {
        var AttendanceModel = new Models.Attendance
            {
                StdID = std.id,
                Name = std.Name,
                RollNo = std.RollNo,
                Mobile = std.Mobile,
                Stdattendence = "Present"
            };

        int response = -1;
        response = await AttendanceService.AddAttendance(AttendanceModel);

        if (response > 0)
        {
            await App.Current.MainPage.DisplayAlert("Record Saved",
            "Added Student Attendance", "OK");
        }
        else
        {
            await App.Current.MainPage.DisplayAlert("Oops",
           "Something went wrong while adding record", "OK");
        }
    }

    private async void Absent(Student std)
    {
        var AttendanceModel = new Models.Attendance
            {
                StdID = std.id,
                Name = std.Name,
                RollNo = std.RollNo,
                Mobile = std.Mobile,
                Stdattendence = "Absent"
            };

        int response = -1;
        response = await AttendanceService.AddAttendance(AttendanceModel);
        //add record

        if (response > 0)
        {
            await App.Current.MainPage.DisplayAlert("Record Saved",
            "Student Attendance ", "OK");
        }
        else
        {
            await App.Current.MainPage.DisplayAlert("Oops",
           "Something went wrong while adding record", "OK");
        }
    }


    public byte[] GetImage(string sBase64String)
    {
        byte[] bytes = null;
        if (!string.IsNullOrEmpty(sBase64String))
        {
            bytes = Convert.FromBase64String(sBase64String);
        }
        return bytes;
    }

    public async void LoadLocalImage()
    {
        try
        {

            using var stream =
                await FileSystem.OpenAppPackageFileAsync("student.png");
            using var reader = new StreamReader(stream);
            byte[] result;
            using (var streamReader = new MemoryStream())
            {
                stream.CopyTo(streamReader);
                result = streamReader.ToArray();
            }
            string imgSrc2 = Convert.ToBase64String(result);
            imgSrc = string.Format("data:image/png;base64,{0}", imgSrc2);
        }
        catch (FileNotFoundException ex)
        {
            // dataResourceText = "Data file not found.";
            Logger.LogError(ex, "'Resource/Raw/student.png' not found.");
            await App.Current.MainPage.DisplayAlert("Oops",
        "Something went wrong File not Found", "OK");
        }
    }
}