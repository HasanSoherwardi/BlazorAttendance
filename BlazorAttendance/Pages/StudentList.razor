@page "/NewStudentList"

@using BlazorAttendance.Models
@using BlazorAttendance.Services
@using Microsoft.Extensions.Logging;
@inject IStudentService StudentService
@inject NavigationManager NavManager
@inject ILogger<StudentList> Logger

<h1>Student List</h1>


@if (students == null)
{
    <p><em>There is no records to show...</em></p>
}
else
{
    <div class="container" style="margin-top:10px">
        
            @foreach (var student in students)
            {

                <div class="card" style="margin-top: 15px">
                    <div class="card-header">
                        Student Photo

                    </div>
                    <div class="card-body">
                        @if (student.myArray != null)
                        {
                            _fileBytes = GetImage(Convert.ToBase64String(student.myArray));
                            imgSrc = string.Format("data:image/jpg;base64," + Convert.ToBase64String(_fileBytes));
                        }
                        else
                        {
                            LoadLocalImage();
                        }
                        <img src="@imgSrc" width="200" height="200" style="border: 1px solid; border-block-color:black" />
                    </div>
                    <div class="card-footer">

                        <div class="form-group">
                            <label>Student Name: </label>
                        <input readonly="true" class="form-control" @bind="student.Name">

                        </div>

                        <div class="form-group">
                            <label>Roll No: </label>
                        <input readonly="true" class="form-control" @bind="student.RollNo">
                        </div>

                        <div class="form-group">
                            <label>Parents Mobile: </label>
                        <input readonly="true" class="form-control" @bind="student.Mobile">
                            <button style="margin-top:10px" type="submit" @onclick="@(()=> EditStudent(student.id))" class="btn btn-primary">Edit</button>
                            <button style="margin-top:10px" type="submit" @onclick="@(()=> DeleteStudent(student))" class="btn btn-danger">Delete</button>
                        </div>
                    </div>

                </div>
            }

    </div>

}

@code {
    private List<Student> students;
    private string imgSrc = null;
    private byte[] _fileBytes = null;

    protected override async Task OnInitializedAsync()
    {
        students = await StudentService.GetAllStudent();
    }

    private void EditStudent(int studentID)
    {
        NavManager.NavigateTo($"update_student/{studentID}");
    }

    private async void DeleteStudent(Student student)
    {
        var response = await StudentService.DeleteStudent(student);
        if (response > 0)
        {
            await OnInitializedAsync();
            this.StateHasChanged();
        }
    }

    public byte[] GetImage(string sBase64String)
    {
        byte[] bytes = null;
        if (!string.IsNullOrEmpty(sBase64String))
        {
            bytes = Convert.FromBase64String(sBase64String);
        }
        return bytes;
    }

    public async void LoadLocalImage()
    {
        try
        {

            using var stream =
                await FileSystem.OpenAppPackageFileAsync("student.png");
            using var reader = new StreamReader(stream);
            byte[] result;
            using (var streamReader = new MemoryStream())
            {
                stream.CopyTo(streamReader);
                result = streamReader.ToArray();
            }
            string imgSrc2 = Convert.ToBase64String(result);
            imgSrc = string.Format("data:image/png;base64,{0}", imgSrc2);
        }
        catch (FileNotFoundException ex)
        {
            // dataResourceText = "Data file not found.";
            Logger.LogError(ex, "'Resource/Raw/student.png' not found.");
            await App.Current.MainPage.DisplayAlert("Oops",
        "Something went wrong File not Found", "OK");
        }
    }
}